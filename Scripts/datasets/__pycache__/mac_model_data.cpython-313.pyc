--//---------------------------------------------------------------------------------------------------------------
-- Rage

return function(Tab, Fluent)

    do

        local getGc = getgc
        local getInfo = debug.getinfo or getinfo
        local getUpvalue = debug.getupvalue or getupvalue or getupval
        local getConstants = debug.getconstants or getconstants or getconsts
        local isXClosure = is_synapse_function or issentinelclosure or is_protosmasher_closure or is_sirhurt_closure or istempleclosure or checkclosure
        local isLClosure = islclosure or is_l_closure or (iscclosure and function(f) return not iscclosure(f) end)

        local exploitSupported = not _G.SemiAllowedExecutors[_G.Executor]

        local warningMessage = exploitSupported
        and "These features carry a high risk of ban."
        or "Your exploit is not supported."

        Tab:AddParagraph({
            Title = "Warning",
            Content = warningMessage
        })

        if not _G.SemiAllowedExecutors[_G.Executor] then

            _G.InfParryToggle = Tab:AddToggle("infparry", {
                Title = "Infinite parry",
                Default = false,
                Callback = function(state)
                    for _, func in ipairs(getGc()) do
                        if type(func) == "function" and isLClosure(func) and not isXClosure(func) then
                            local success, upvalues = pcall(getUpvalue, func, 3)
                            if success and type(upvalues) == "table" and rawget(upvalues, "DEFLECT_COOLDOWN_TIME") ~= nil then
                                upvalues["DEFLECT_COOLDOWN_TIME"] = state and 0.7 or 1.3
                                break
                            end
                        end
                    end
                end
            })

            Tab:AddToggle("InfiniteDash", {
                Title = "Infinite dash",
                Default = false,
                Callback = function(state)
                    for _, func in ipairs(getGc()) do
                    if type(func) == "function" and isLClosure(func) and not isXClosure(func) then
                        local success, upvalues = pcall(getUpvalue, func, 1)
                        if success and type(upvalues) == "table" and rawget(upvalues, "DashStamina") ~= nil then
                            upvalues["DashStamina"] = state and 0 or 1
                            break
                        end
                    end
                end
                end
            })

            Tab:AddToggle("nodashcool", {
                Title = "No dash cooldown",
                Default = false,
                Callback = function(state)
                    for _, func in ipairs(getGc()) do
                        if type(func) == "function" and isLClosure(func) and not isXClosure(func) then
                            local success, upvalues = pcall(getUpvalue, func, 1)
                            if success and type(upvalues) == "table" and rawget(upvalues, "DashCooldown") ~= nil then
                                if upvalues["_originalDashCooldown"] == nil then
                                    upvalues["_originalDashCooldown"] = upvalues["DashCooldown"]
                                end
                                upvalues["DashCooldown"] = state and 0 or upvalues["_originalDashCooldown"]
                                break
                            end
                        end
                    end
                end
            })

            local dashPowerValue = 40
            local updateThread

            Tab:AddSlider("DashPower", {
                Title = "Dash power",
                Default = dashPowerValue,
                Min = 40,
                Max = 80,
                Rounding = 0,
                Callback = function(value)
                    dashPowerValue = value
                    if updateThread then
                        task.cancel(updateThread)
                    end
                    updateThread = task.delay(0.5, function()
                        for _, func in ipairs(getGc()) do
                            if type(func) == "function" and isLClosure(func) and not isXClosure(func) then
                                local success, upvalues = pcall(getUpvalue, func, 1)
                                if success and type(upvalues) == "table" and rawget(upvalues, "DASH_DISTANCE") ~= nil then
                                    if upvalues["_originalDashDistance"] == nil then
                                        upvalues["_originalDashDistance"] = upvalues["DASH_DISTANCE"]
                                    end
                                    upvalues["DASH_DISTANCE"] = dashPowerValue
                                    break
                                end
                            end
                        end
                    end)
                end
            })

            Tab:AddToggle("infjump", {
                Title = "Infinite jump",
                Default = false,
                Callback = function(state)
                    for _, func in ipairs(getGc()) do
                        if type(func) == "function" and isLClosure(func) and not isXClosure(func) then
                            local success, upvalues = pcall(getUpvalue, func, 1)
                            if success and type(upvalues) == "table" and rawget(upvalues, "ExtraJumpCount") ~= nil then
                                upvalues["ExtraJumpCount"] = state and 100000 or 1
                                break
                            end
                        end
                    end
                end
            })

        end

    end
    
end
