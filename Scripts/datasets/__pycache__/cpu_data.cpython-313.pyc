--//---------------------------------------------------------------------------------------------------------------
-- Visuals

return function(Tab, Fluent)

    do

        local Players = game:GetService("Players")
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local Workspace = game:GetService("Workspace")

        local localPlayer = Players.LocalPlayer

        -- Pega todas as swords
        local SwordData = {}
        local assets = ReplicatedStorage:FindFirstChild("Assets")
        if assets then
            local swordsFolder = assets:FindFirstChild("Swords")
            if swordsFolder then
                for _, model in ipairs(swordsFolder:GetChildren()) do
                    if model:IsA("Model") then
                table.insert(SwordData, model.Name)
                    end
                end
            end
        end

        -- Cria lista para dropdown com "NoneOptions" no topo
        local dropdownValues = {"None"}
        for _, name in ipairs(SwordData) do
            table.insert(dropdownValues, name)
        end

        -- Pasta para guardar a espada original
        local storageFolder = ReplicatedStorage:FindFirstChild("SwordStorage_" .. localPlayer.UserId) or Instance.new("Folder")
        storageFolder.Name = "SwordStorage_" .. localPlayer.UserId
        storageFolder.Parent = ReplicatedStorage

        local originalSwordFolderName = localPlayer.Name .. " SwordWelds"
        local mainSwordPartName = "Sword"
        local mainSwordWeldName = "Weld"

        -- Guardar original
        local function findAndMoveOriginalSwordToStorage()
            local movedSomething = false
            storageFolder:ClearAllChildren()
            local sourceFolder

            for _, child in ipairs(Workspace:GetChildren()) do
                if child.Name == originalSwordFolderName and child:IsA("Folder") and #child:GetChildren() > 0 then
                    sourceFolder = child
                    break
                end
            end

            if sourceFolder then
                for _, potentialDuplicate in ipairs(Workspace:GetChildren()) do
                    if potentialDuplicate.Name == originalSwordFolderName and potentialDuplicate:IsA("Folder") and potentialDuplicate ~= sourceFolder then
                pcall(function() potentialDuplicate:Destroy() end)
                    end
                end
                for _, item in ipairs(sourceFolder:GetChildren()) do
                    item.Parent = storageFolder
                    movedSomething = true
                end
                return movedSomething
            end

            local looseItemsToMove = {}
            local looseSwordPart = Workspace:FindFirstChild(mainSwordPartName)
            if looseSwordPart and looseSwordPart:IsA("BasePart") then
                table.insert(looseItemsToMove, looseSwordPart)
                local looseWeld = Workspace:FindFirstChild(mainSwordWeldName)
                if looseWeld and looseWeld:IsA("Weld") then
                    table.insert(looseItemsToMove, looseWeld)
                end
            end
            for _, item in ipairs(looseItemsToMove) do
                item.Parent = storageFolder
                movedSomething = true
            end

            return movedSomething
        end

        -- Devolver original
        local function moveOriginalSwordBackToFolder()
            local itemsInStorage = storageFolder:GetChildren()
            if #itemsInStorage == 0 then return true end

            local targetFolder = Workspace:FindFirstChild(originalSwordFolderName)
            if not targetFolder or not targetFolder:IsA("Folder") then
                if targetFolder then pcall(function() targetFolder:Destroy() end) end
                targetFolder = Instance.new("Folder")
                targetFolder.Name = originalSwordFolderName
                targetFolder.Parent = Workspace
            end

            for _, child in ipairs(itemsInStorage) do
                child.Parent = targetFolder
                task.wait()
            end

            return #storageFolder:GetChildren() == 0
        end

        -- UI
        Tab:AddSection("Swords")

        Tab:AddDropdown("SwordSelector", {
            Title = "Select sword",
            Values = dropdownValues,
            Default = "None",
            Callback = function(Value)
                local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()

                if Value == "None" then
                    -- Remove custom e devolve original
                    local existingSword = character:FindFirstChild("Sword")
                    if existingSword then existingSword:Destroy() end
                    moveOriginalSwordBackToFolder()
                    return
                end

                -- Guardar original (se ainda nÃ£o guardou)
                findAndMoveOriginalSwordToStorage()

                -- Equipar espada custom
                local swordModel = ReplicatedStorage.Assets.Swords:FindFirstChild(Value)
                if swordModel then
                    local sword = swordModel:FindFirstChild("Sword"):Clone()
                    local offsetValue = swordModel:FindFirstChild("Offset").Value

                    -- remove qualquer sword atual
                    local existingSword = character:FindFirstChild("Sword")
                    if existingSword then existingSword:Destroy() end

                    sword.Parent = character

                    local weld = Instance.new("Weld")
                    weld.Part0 = sword
                    weld.Part1 = character:FindFirstChild("rtool")
                    weld.C1 = offsetValue
                    weld.Parent = sword

                    sword.Anchored = false
                end
            end
        })

        Tab:AddSection("Auras")

        local StarterPlayerScripts = game:GetService("StarterPlayer").StarterPlayerScripts
        local Workspace = game:GetService("Workspace")
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()

        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

        local currentAuraFolder

        local auraList = {}
        local auraPositions = {

            ["AngelAura"] = CFrame.new(0, 0, -0.5),
            ["ShadowAura"] = CFrame.new(0, -3, 0),
            ["ShadowAura"] = CFrame.new(0, -3, -0.5),
            ["DreamwalkerAura"] = CFrame.new(0, -3, 0),
            ["HallowtideAura"] = CFrame.new(0, -3, 0),
            ["BloodAura"] = CFrame.new(0, -2.8, 0),
            ["InfernoAura"] = CFrame.new(0, -3, 0),
            ["PoisonAura"] = CFrame.new(0, -2.8, 0),
            ["PortalAura"] = CFrame.new(0, -2.9, 0),
            ["LunarAura"] = CFrame.new(0, -2.9, 0),
            ["RoseAura"] = CFrame.new(0, -2.9, 0),
            ["ConstellationAura"] = CFrame.new(0, -2.9, 0),
            ["ZenithAura"] = CFrame.new(0, -2.9, 0),
            ["IgnisAura"] = CFrame.new(0, -2.9, 0),
            ["EmperorAura"] = CFrame.new(0, -2.9, 0),
            ["GoldenDragonAura"] = CFrame.new(0, -2.9, 0),
            ["ShogunAura"] = CFrame.new(0, -2.9, 0),
            ["CosmicAura"] = CFrame.new(0, -2.9, 0),
            ["VoidAura"] = CFrame.new(0, -500, 0),
            ["EclipseAura"] = CFrame.new(0, -500, 0),
    
        }

        for _, child in ipairs(StarterPlayerScripts:GetChildren()) do
            if child:FindFirstChild("Aura") then
                local aura = child.Aura
                local baseAura = aura:FindFirstChild("BaseAura")
                if baseAura then
                    for _, item in ipairs(baseAura:GetChildren()) do
                        if #item:GetChildren() > 0 then
                            table.insert(auraList, {
                                Name = item.Name,
                                Children = item:GetChildren()
                            })
                        end
                    end
                end
            end
        end

        local auraOptions = {"None"}
        for _, aura in ipairs(auraList) do
            table.insert(auraOptions, aura.Name)
        end

        Tab:AddDropdown("AuraSelector", {
            Title = "Select aura",
            Values = auraOptions,
            Default = "None",
            Callback = function(selected)
                if currentAuraFolder then
                    for _, child in ipairs(currentAuraFolder:GetChildren()) do
                        if child:IsA("BasePart") then
                            child:Destroy()
                        end
                    end
                    currentAuraFolder:Destroy()
                end

                if selected == "None" then
                    currentAuraFolder = nil
                    return
                end

                for _, aura in ipairs(auraList) do
                    if aura.Name == selected then
                        local auraFolder = Instance.new("Folder")
                        auraFolder.Name = selected
                        auraFolder.Parent = Workspace
                
                        currentAuraFolder = auraFolder

                        local auraPosition = auraPositions[selected] or CFrame.new(0, 0, 0)

                        for _, subItem in ipairs(aura.Children) do
                            local clone = subItem:Clone()

                            if clone:IsA("BasePart") then
                                local weld = Instance.new("Weld")
                                weld.Name = "AuraWeld"
                                weld.Part0 = humanoidRootPart
                                weld.Part1 = clone
                                weld.C0 = auraPosition
                                weld.C1 = CFrame.new(0, 0, 0)

                                clone.Parent = auraFolder
                                clone.Anchored = false

                                if clone:IsA("BasePart") then
                                    clone.CanCollide = false
                                end

                                weld.Parent = clone
                            elseif clone:IsA("Model") then
                                for _, part in ipairs(clone:GetChildren()) do
                                    if part:IsA("BasePart") then
                                        local weld = Instance.new("Weld")
                                        weld.Name = "AuraWeld"
                                        weld.Part0 = humanoidRootPart
                                        weld.Part1 = part
                                        weld.C0 = auraPosition
                                        weld.C1 = CFrame.new(0, 0, 0)

                                        part.Parent = auraFolder
                                        part.Anchored = false

                                        if part:IsA("BasePart") then
                                            part.CanCollide = false
                                        end
                                        weld.Parent = part
                                    end
                                end
                            end
                            local tag = Instance.new("BoolValue")
                            tag.Name = "AuraTag"
                            tag.Parent = clone
                        end
                        auraFolder.Parent = Workspace
                    end
                end
            end
        })

        Tab:AddSection("Poses")

        local SheetItemData = require(ReplicatedStorage.DataBins.ItemData:FindFirstChild("SheetItemData"))
        local AnimData = {"None"}
        for key, item in SheetItemData do
	        if item.Category == "Pose" and item.DisplayName then
		        table.insert(AnimData, item.DisplayName)
	        end
        end

        local function getPoseUsageDataByDisplayName(displayName)
	        for key, item in SheetItemData do
		        if item.Category == "Pose" and item.DisplayName == displayName then
			        return item.UsageData
		        end
	        end
	        return nil
        end

        Tab:AddDropdown("AnimChanger", {
	        Title = "Select pose",
	        Values = AnimData,
	        Default = "None",
	        Callback = function(Value)
		        local player = game.Players.LocalPlayer
		        local character = player.Character or player.CharacterAdded:Wait()
		        local humanoid = character:WaitForChild("Humanoid")

		        local animationId

		        if Value == "None" then
			        animationId = "0"
		        else
			        local usageData = getPoseUsageDataByDisplayName(Value)
			        if not usageData then
				        warn("No Pose found with DisplayName: " .. tostring(Value))
				        return
			        end

			        animationId = usageData.AnimationId or usageData[1] or usageData

			        if not animationId or tostring(animationId) == "" then
				        warn("No AnimationId found in UsageData for Pose: " .. tostring(Value))
				        return
			        end
		        end

		        local animation = character:FindFirstChild("Animation") or Instance.new("Animation")
		        animation.AnimationId = "rbxassetid://" .. tostring(animationId)
		        animation.Parent = character
		        local animationTrack = humanoid:LoadAnimation(animation)
		        local function onIdle()
			        if humanoid.MoveDirection.Magnitude == 0 then
				        if not animationTrack.IsPlaying then
					        animationTrack:Play()
				        end
			        else
				        if animationTrack.IsPlaying then
					        animationTrack:Stop()
				        end
			        end
		        end

		        humanoid.Running:Connect(onIdle)

		        local previousAnimationId = animation.AnimationId
		        game:GetService("RunService").Heartbeat:Connect(function()
			        if animation.AnimationId ~= previousAnimationId and Value then
				        animationTrack:Stop()
				        animationTrack:Destroy()
				        animationTrack = humanoid:LoadAnimation(animation)
				        animationTrack:Play()
				        previousAnimationId = animation.AnimationId
			        end
		        end)
	        end
        })



        local Players = game:GetService("Players")
        local StarterPlayerScripts = game:GetService("StarterPlayer").StarterPlayerScripts
        local Workspace = game:GetService("Workspace")
        local Debris = game:GetService("Debris")
        local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Lista de enchants disponÃ­veis (sons)
local EnchantList = {
    Wind = "rbxassetid://15567866091",
    Redfang = "rbxassetid://77632169477634",   -- coloca os ids reais
    Prism = "rbxassetid://89705007736184",
    Poison = "rbxassetid://00000000003",
    Galaxy = "rbxassetid://00000000004",
    Frost = "rbxassetid://15567865708",
    Flame = "rbxassetid://15567865933",
    Electric = "rbxassetid://15567866886",
    Cherryblow = "rbxassetid://127448611717256",
    Claws = "rbxassetid://75672020501476"
}

-- Dropdown values (primeiro None)
local dropdownValues = {"None"}
for enchantName in pairs(EnchantList) do
    table.insert(dropdownValues, enchantName)
end

-- FunÃ§Ã£o para tocar som
local function tocarSom(soundId)
    if not soundId then return end
    local sound = Instance.new("Sound")
    sound.SoundId = soundId
    sound.Volume = 1
    sound.Looped = false
    sound.Parent = character:WaitForChild("Head")
    sound:Play()
end

-- FunÃ§Ã£o recursiva para emitir efeitos
local function emitEffects(parent)
    for _, child in ipairs(parent:GetChildren()) do
        if child:IsA("Beam") then
            child.Enabled = true
        elseif child:IsA("ParticleEmitter") then
            local count = child:GetAttribute("EmitCount") or 10
            local delayTime = child:GetAttribute("EmitDelay") or 0
            task.delay(delayTime, function()
                child:Emit(count)
            end)
        elseif #child:GetChildren() > 0 then
            emitEffects(child)
        end
    end
end

-- FunÃ§Ã£o especial para Claws
local function dispararClaws(clawsModule)
    local FXContainer = Workspace:FindFirstChild("LocalFX") or Instance.new("Folder")
    FXContainer.Name = "LocalFX"
    FXContainer.Parent = Workspace

    -- SlashModel
    local slashModel = clawsModule:WaitForChild("SlashModel"):Clone()
    slashModel.Parent = FXContainer

    local partConfigs = {
        SlashPart1 = {offset = Vector3.new(0, 2, 0), rotation = CFrame.Angles(0, 0, math.rad(80))},
        SlashPart2 = {offset = Vector3.new(0, 0, 0), rotation = CFrame.Angles(0, 0, math.rad(80))},
        SlashPart3 = {offset = Vector3.new(0, -2, 0), rotation = CFrame.Angles(0, 0, math.rad(80))}
    }

    for partName, _ in pairs(partConfigs) do
        local part = slashModel:FindFirstChild(partName)
        if part then
            emitEffects(part)
        end
    end

    local beams = {}
    for _, beam in ipairs(slashModel:GetDescendants()) do
        if beam:IsA("Beam") then
            table.insert(beams, beam)
        end
    end

    -- Part "1"
    local part1 = clawsModule:WaitForChild("1"):Clone()
    part1.Parent = FXContainer
    part1.Transparency = 1
    part1.CanCollide = false
    part1.Position = rootPart.Position + Vector3.new(0, 2, 0)
    part1.Anchored = true
    emitEffects(part1)
    Debris:AddItem(part1, 0.3)

    -- AnimaÃ§Ã£o
    local startTime = tick()
    local duration = 0.1
    local moveDist = 1

    RunService.Heartbeat:Connect(function()
        local progress = math.clamp((tick() - startTime) / duration, 0, 1)
        local transparency = NumberSequence.new(1 - progress)
        for _, beam in ipairs(beams) do
            beam.Transparency = transparency
        end

        local xOffset = -moveDist/2 + moveDist * progress
        for partName, cfg in pairs(partConfigs) do
            local part = slashModel:FindFirstChild(partName)
            if part then
                part.CFrame = rootPart.CFrame * CFrame.new(cfg.offset + Vector3.new(xOffset, 0, 0)) * cfg.rotation
            end
        end

        if progress >= 1 then
            slashModel:Destroy()
        end
    end)

    tocarSom(EnchantList["Claws"])
end

-- UI
Tab:AddSection("Enchants")

local activeEnchant = "None"
local enchantConnection

Tab:AddDropdown("EnchantSelector", {
    Title = "Select Enchant",
    Values = dropdownValues,
    Default = "None",
    Callback = function(Value)
        activeEnchant = Value

        if enchantConnection then
            enchantConnection:Disconnect()
            enchantConnection = nil
        end

        if activeEnchant == "None" then
            print("â Enchants desligados.")
            return
        end

        -- Acha SuccessFrame
        local successFrame
        pcall(function()
    local gui = player:FindFirstChild("PlayerGui")
    if not gui then return end
    local hud = gui:FindFirstChild("HUD")
    if not hud then return end
    local holder = hud:FindFirstChild("HolderBottom")
    if not holder then return end
    local toolbar = holder:FindFirstChild("ToolbarButtons")
    if not toolbar then return end
    local deflect = toolbar:FindFirstChild("DeflectButton")
    if not deflect then return end
    successFrame = deflect:FindFirstChild("SuccessFrame")
end)

-- Tentativa mobile
if not successFrame then
    pcall(function()
        local gui = player:FindFirstChild("PlayerGui")
        if not gui then return end
        local mobileGUI = gui:FindFirstChild("MobileButtonsGUI")
        if not mobileGUI then return end
        local holder = mobileGUI:FindFirstChild("MobileButtonHolder")
        if not holder then return end
        local deflect = holder:FindFirstChild("DeflectButton")
        if not deflect then return end
        successFrame = deflect:FindFirstChild("SuccessFrame")
    end)
end

        if not successFrame then
            warn("â ï¸ SuccessFrame nÃ£o encontrado.")
            return
        end

        enchantConnection = RunService.Heartbeat:Connect(function()
            local ok, isVisible = pcall(function()
                return successFrame.Visible
            end)

            if ok and isVisible then
                successFrame.Visible = false -- reset

                -- Encontra mÃ³dulo
                local selectedModule
                for _, module in ipairs(StarterPlayerScripts:GetChildren()) do
                    local enchantModules = module:FindFirstChild("EnchantModules")
                    if enchantModules and enchantModules:FindFirstChild(activeEnchant) then
                        selectedModule = enchantModules:FindFirstChild(activeEnchant)
                        break
                    end
                end

                if not selectedModule then
                    warn("â NÃ£o foi possÃ­vel encontrar o mÃ³dulo:", activeEnchant)
                    return
                end

                -- Claws tem lÃ³gica prÃ³pria
                if activeEnchant == "Claws" then
                    dispararClaws(selectedModule)
                    return
                end

                -- Container FX
                local FXContainer = Workspace:FindFirstChild("LocalFX") or Instance.new("Folder")
                FXContainer.Name = "LocalFX"
                FXContainer.Parent = Workspace

                -- Part "3"
                local part3 = selectedModule:FindFirstChild("3")
                if part3 then
                    part3 = part3:Clone()
                    part3.Parent = FXContainer
                    part3.Transparency = 1
                    part3.CanCollide = false
                    part3.Anchored = true

                    local offset = CFrame.new(0, 0, 0)
                    local connection
                    connection = RunService.Heartbeat:Connect(function()
                        if part3.Parent and rootPart.Parent then
                            part3.CFrame = rootPart.CFrame * offset
                        else
                            if connection then connection:Disconnect() end
                        end
                    end)

                    emitEffects(part3)
                    Debris:AddItem(part3, 3)
                    task.delay(3, function()
                        if connection then connection:Disconnect() end
                    end)
                end

                -- Som
                tocarSom(EnchantList[activeEnchant])
            end
        end)
    end
})








        local Players = game:GetService("Players")
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local Workspace = game:GetService("Workspace")

        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()

        -- FunÃ§Ã£o que remove qualquer skin aplicada
        local function removeSkin()
            for _, obj in ipairs(Workspace:GetChildren()) do
                if obj:IsA("Model") and obj.Name:match("^Skin%d+$") then
                    obj:Destroy()
                end
            end
        end

        -- FunÃ§Ã£o que aplica uma skin
        local function applySkin(skinNumber)
            local playerTorso = character:FindFirstChild("UpperTorso") or character:FindFirstChild("Torso")
            local playerHead = character:FindFirstChild("Head")
            local playerLeftArm = character:FindFirstChild("Left Arm") or character:FindFirstChild("LeftUpperArm")
            local playerRightArm = character:FindFirstChild("Right Arm") or character:FindFirstChild("RightUpperArm")
            local playerLeftLeg = character:FindFirstChild("Left Leg") or character:FindFirstChild("LeftUpperLeg")
            local playerRightLeg = character:FindFirstChild("Right Leg") or character:FindFirstChild("RightUpperLeg")

            -- Limpa skins antigas
            removeSkin()

        -- Pega e clona a skin escolhida
        local skinTemplate = ReplicatedStorage:WaitForChild("Assets"):WaitForChild("Skins"):FindFirstChild("Skin"..skinNumber)
        if not skinTemplate then
            warn("Skin"..skinNumber.." nÃ£o encontrada!")
            return
        end

        local skin = skinTemplate:Clone()
        skin.Parent = Workspace

        -- Partes que queremos preservar
        local partsToPreserve = {
            "Body", "Head", "Torso", "Right Leg", "Right Arm", "Left Leg", "Left Arm"
        }

        -- Configura transparÃªncia e colisÃ£o
        for _, child in ipairs(skin:GetChildren()) do
            if not table.find(partsToPreserve, child.Name) then
                child:Destroy()
            elseif child:IsA("BasePart") then
                child.Transparency = 1
                child.CanCollide = false
            end
        end

        -- FunÃ§Ã£o para soldar partes
        local function weldParts(skinPart, playerPart)
            if skinPart and playerPart then
                local weld = Instance.new("Weld")
                weld.Part0 = skinPart
                weld.Part1 = playerPart
                weld.C0 = CFrame.new(0, 0, 0)
                weld.C1 = CFrame.new(0, 0, 0)
                weld.Parent = skinPart
            end
        end

        -- Cria welds
        weldParts(skin:FindFirstChild("Head"), playerHead)
        weldParts(skin:FindFirstChild("Torso"), playerTorso)
        weldParts(skin:FindFirstChild("Left Arm"), playerLeftArm)
        weldParts(skin:FindFirstChild("Right Arm"), playerRightArm)
        weldParts(skin:FindFirstChild("Left Leg"), playerLeftLeg)
        weldParts(skin:FindFirstChild("Right Leg"), playerRightLeg)
        end

    -- Dropdown de skins
    local SKINS = {}
    for i = 1, 11 do
        SKINS[tostring(i)] = "Skin"..i
    end

    local skinOptions = {"None"}
for n, _ in pairs(SKINS) do
    table.insert(skinOptions, n)
end

local selectedSkin = "None"

Tab:AddSection("Skins")

Tab:AddDropdown("SkinSelector", {
    Title = "Select Skin",
    Values = skinOptions,
    Default = "None",
    Callback = function(Value)
        selectedSkin = Value
        if Value == "None" then
            removeSkin()
        else
            applySkin(Value)
        end
    end
})

        local SKYBOXES = {
            ["1"] = {
                SkyboxBk = "rbxassetid://15502324143",
                SkyboxDn = "rbxassetid://15502324962",
                SkyboxFt = "rbxassetid://15502325676",
                SkyboxLf = "rbxassetid://15502326432",
                SkyboxRt = "rbxassetid://15502327161",
                SkyboxUp = "rbxassetid://15502328272",
                CelestialBodiesShown = false,
                StarCount = 3000
            },
            ["2"] = {
                SkyboxBk = "rbxassetid://12216109205",
                SkyboxDn = "rbxassetid://12216109875",
                SkyboxFt = "rbxassetid://12216109489",
                SkyboxLf = "rbxassetid://12216110170",
                SkyboxRt = "rbxassetid://12216110471",
                SkyboxUp = "rbxassetid://12216108877",
                CelestialBodiesShown = true,
                StarCount = 3000
            },
            ["3"] = {
                SkyboxBk = "http://www.roblox.com/asset/?id=15670828196",
                SkyboxDn = "http://www.roblox.com/asset/?id=15670829373",
                SkyboxFt = "http://www.roblox.com/asset/?id=15670830476",
                SkyboxLf = "http://www.roblox.com/asset/?id=15670831662",
                SkyboxRt = "http://www.roblox.com/asset/?id=15670833256",
                SkyboxUp = "http://www.roblox.com/asset/?id=15670834206",
                CelestialBodiesShown = true,
                StarCount = 3000
            },
            ["4"] = {
                SkyboxBk = "http://www.roblox.com/asset/?id=150939216",
                SkyboxDn = "http://www.roblox.com/asset/?id=150939223",
                SkyboxFt = "http://www.roblox.com/asset/?id=150939233",
                SkyboxLf = "http://www.roblox.com/asset/?id=150939244",
                SkyboxRt = "http://www.roblox.com/asset/?id=150939249",
                SkyboxUp = "http://www.roblox.com/asset/?id=150939252",
                CelestialBodiesShown = true,
                StarCount = 3000
            },
            ["5"] = {
                SkyboxBk = "rbxassetid://12635309703",
                SkyboxDn = "rbxassetid://12635311686",
                SkyboxFt = "rbxassetid://12635312870",
                SkyboxLf = "rbxassetid://12635313718",
                SkyboxRt = "rbxassetid://12635315817",
                SkyboxUp = "rbxassetid://12635316856",
                CelestialBodiesShown = true,
                SunAngularSize = 11,
                StarCount = 1334
            }
        }

        local skyboxOptions = {"None"}
        for n, _ in pairs(SKYBOXES) do table.insert(skyboxOptions, n) end

        local selectedSkybox = "None"
        local skyboxLoopConnection = nil

        local function applySkybox(skyboxName)
            local data = SKYBOXES[skyboxName]
            if not data then return end
            local Lighting = game:GetService("Lighting")
            local TweenService = game:GetService("TweenService")
            local sky = Lighting:FindFirstChildOfClass("Sky")
            if not sky then sky = Instance.new("Sky") sky.Parent = Lighting end
            local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Quad)
            sky.SkyboxBk = data.SkyboxBk or sky.SkyboxBk
            sky.SkyboxDn = data.SkyboxDn or sky.SkyboxDn
            sky.SkyboxFt = data.SkyboxFt or sky.SkyboxFt
            sky.SkyboxLf = data.SkyboxLf or sky.SkyboxLf
            sky.SkyboxRt = data.SkyboxRt or sky.SkyboxRt
            sky.SkyboxUp = data.SkyboxUp or sky.SkyboxUp
            if data.CelestialBodiesShown ~= nil then sky.CelestialBodiesShown = data.CelestialBodiesShown end
            if data.StarCount ~= nil and sky.StarCount ~= nil then
                TweenService:Create(sky, tweenInfo, {StarCount = data.StarCount}):Play()
            end
            if data.SunAngularSize ~= nil and sky.SunAngularSize ~= nil then
                TweenService:Create(sky, tweenInfo, {SunAngularSize = data.SunAngularSize}):Play()
            end
            if data.MoonAngularSize ~= nil and sky.MoonAngularSize ~= nil then
                TweenService:Create(sky, tweenInfo, {MoonAngularSize = data.MoonAngularSize}):Play()
            end
            if data.Exposure ~= nil and sky.Exposure ~= nil then
                TweenService:Create(sky, tweenInfo, {Exposure = data.Exposure}):Play()
            end
        end

        local function startSkyboxLoop()
            if skyboxLoopConnection then
                skyboxLoopConnection:Disconnect()
            end
            if selectedSkybox == "None" then return end
            skyboxLoopConnection = game:GetService("RunService").Heartbeat:Connect(function()
                applySkybox(selectedSkybox)
            end)
        end

        local function stopSkyboxLoop()
            if skyboxLoopConnection then
                skyboxLoopConnection:Disconnect()
                skyboxLoopConnection = nil
            end
        end

        local function resetToDefaultSkybox()
            local Lighting = game:GetService("Lighting")
            local sky = Lighting:FindFirstChildOfClass("Sky")
            if sky then
                sky:Destroy()
            end
        end

        Tab:AddSection("Skybox")

        Tab:AddDropdown("SkyboxSelector", {
            Title = "Select Skybox", Values = skyboxOptions, Default = "None",
            Callback = function(Value)
                selectedSkybox = Value
                stopSkyboxLoop()
                if Value == "None" then
                    resetToDefaultSkybox()
                else
                    startSkyboxLoop()
                end
            end
        })

    end
    
end
